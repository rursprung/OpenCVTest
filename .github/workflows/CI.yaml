name: CI

on:
  push:
    branches: [ "master" ]
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            build_type: Debug
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            build_type: Debug
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            build_type: Debug

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      # install dependencies of dependencies (based on CI failures)
      - name: install dependencies
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y libxi-dev libxtst-dev libxrandr-dev

      - name: Setup vcpkg (incl. caching)
        uses: lukka/run-vcpkg@v11

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

  # simplify GH settings: have one single build to be required
  build-results:
    name: Final Results
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: check for failed builds
        if: ${{ needs.build.result != 'success' }}
        run: exit 1
